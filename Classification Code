//var roi = ee.FeatureCollection("users/oduoljeffrey/transnzoia")
var countries = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');
var roi = countries.filter(ee.Filter.eq('country_na','Kenya'));

//cloud masking
function maskS2clouds(image){
    return image.updateMask(image.select('QA60').eq(0));
}
//Map.addLayer(roi, {}, false);
var s2 = ee.ImageCollection("COPERNICUS/S2")
var rgbVis = {
  min: 0.0,
  max: 3000,
  bands: ['B4', 'B3', 'B2'],
};

var filtered = s2
//.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 15))
.filter(ee.Filter.date('2016-06-01', '2016-07-30'))
.filter(ee.Filter.bounds(roi))
//.select('B.*')
.map(maskS2clouds);
var composite = filtered.median().clip(roi);
var outImg = composite.visualize(rgbVis)
Map.addLayer(composite, rgbVis, 'Sentinel 2 image');

var gcps = maize.merge(bareland).merge(water).merge(trees)

// Overlay the point on the image to get training data.
var training = composite.sampleRegions({
  collection: gcps, 
  properties: ['Class'], 
  scale: 10
});

// Train a classifier.
var classifier = ee.Classifier.smileCart().train({
  features: training,  
  classProperty: 'Class', 
  inputProperties: composite.bandNames()
});
// // Classify the image.
var classified = composite.classify(classifier);
//Map.addLayer(classified, {min: 0, max: 3, palette: ['yellow', 'red', 'blue', 'green']}, 'Classification');

//Map.addLayer(roi, {color: 'blue'}, 'Region', false)
//Map.centerObject(roi)

var kenyaArea = roi.geometry().area();
var kenyaAreaSqKm = ee.Number(kenyaArea).divide(1e6); //.round()
print('Kenya in Sq KM', kenyaAreaSqKm);

var geometryArea = geometry.area();
var geometryAreaSqKm = ee.Number(geometryArea).divide(1e4);
print('Area of Geometry in km2',geometryAreaSqKm );

var maizeRegion = classified.eq(0);
Map.addLayer(maizeRegion, {min:0, max:1, palette: ['white', 'Green']}, 'Maize Area', false);

var areaImage = maizeRegion.multiply(ee.Image.pixelArea());
var area = areaImage.reduceRegion({
  reducer: ee.Reducer.sum(),
  //geometry: roi.geometry(),
  geometry: geometry,
  scale: 10,
  tileScale: 8,
  maxPixels: 1e10
  });

var maizeAreaHectares = ee.Number(area.get('classification')).divide(1e4);
print('Maize Area in Hectares',maizeAreaHectares);
//Map.addLayer(region, {})
//Map.centerObject(region);

/////////////////////////////////////////////////////////////

// get the boundary of the feature you want to work on
var region = ee.FeatureCollection("users/oduoljeffrey/Kenya/KenyaLand");
var mean = filtered.reduce(ee.Reducer.mean()).clip(region);

var vis_param = {min:0, max:2000,bands:['B4_mean', 'B3_mean', 'B2_mean'], gamma: 1.6};
//Calculate NDVI using NIR and RED bands
var NIR = mean.select('B8_mean');
var RED = mean.select('B4_mean');
var NDVI = NIR.subtract(RED).divide(NIR.add(RED));
//Map.addLayer(NDVI.clip(geometry),{palette:'white,green'},'NDVI');
Map.centerObject(geometry);

var maizePixels = maizeRegion.reduceToVectors(
  ee.Reducer.countEvery(),
  geometry, 
  10
);
Map.addLayer(maizePixels,{}, 'Maize Pixels', false);

//Converting the feature collection to a geometry
var FFF = maizePixels.geometry();

var meanNDVI = NDVI.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: FFF,
  scale: 10,
  tileScale: 8,
  maxPixels: 1e10
  });
print('Mean NDVI', meanNDVI);
Map.addLayer(NDVI.clip(maizePixels),{palette:'white,green'},'NDVI', false);

//SARVI
var SARVI = mean.expression('((NIR-(Red-1*(Blue-Red)))/(NIR+(Red-1*(Blue-Red))))*(1+0.5)', {
                          'NIR' : mean.select('B8_mean'),
                          'Red' : mean.select('B4_mean'),
                          'Blue' : mean.select('B2_mean')
                      })
                      ;
var meanSARVI= SARVI.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: FFF,
  scale: 10,
  maxPixels: 1e10
});
print('Mean SARVI',meanSARVI);
Map.addLayer(SARVI.clip(maizePixels),{palette:['white','red']},'SARVI', false);

//NPCRI
var NPCRI = mean.expression(
                      '((RED-blue)/(RED+blue))', {
                        'RED' : mean.select('B4_mean'),
                        'blue' : mean.select('B2_mean')
                      })
                      ;
                      
var meanNPCRI= NPCRI.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: FFF,
  scale: 10,
  maxPixels: 1e10
});
print('NPCRI mean',meanNPCRI);
Map.addLayer(NPCRI.clip(maizePixels),{palette:['#e5f5f9','#99d8c9','#2ca25f']},'NPCRI', false);

//EVI_2
var EVI_2 = mean.expression(
                      '(2.5*(NIR-RED))/(NIR+C2*Blue+1)', {
                        'NIR' : mean.select('B8_mean'),
                        'RED' : mean.select('B4_mean'),
                        'Blue' : mean.select('B2_mean'),
                        'C2' :7.5
                      })
                      ;
                      
var meanEVI_2= EVI_2.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: geometry,
  scale: 10,
  maxPixels: 1e10
});

print('EVI_2 mean',meanEVI_2);
Map.addLayer(EVI_2.clip(maizePixels),{palette:['#fff7bc','#fec44f','#d95f0e'],min:0,max:10},'EVI_2', false);

// RVI
var RVI = mean.expression(
                      '(NIR/RED)', {
                        'NIR' : mean.select('B8_mean'),
                        'RED' : mean.select('B4_mean')
                      })
                      ;
                      
var meanRVI= RVI.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: geometry,
  scale: 10,
  maxPixels: 1e10
});

print('RVI mean',meanRVI);
Map.addLayer(RVI.clip(maizePixels),{palette:['#fff7bc','#fec44f','#d95f0e'],min:0,max:10},'RVI', false);

//GCI
var GCI = mean.expression(
                      '(NIR/Green-1)', {
                        'NIR' : mean.select('B8_mean'),
                        'Green' : mean.select('B3_mean')
                      })
                      ;
                      
var meanGCI= GCI.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: geometry,
  scale: 10,
  maxPixels: 1e10
});

print('GCI mean',meanGCI);
Map.addLayer(GCI.clip(maizePixels),{palette:['#fff7bc','#fec44f','#d95f0e'],min:0,max:10},'GCI', false);

print(outImg.getThumbURL({region: geometry, scale: 200, format: 'png'}));

